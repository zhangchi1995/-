/**
 * 我们知道Java的三大特性:封装,继承,多态。Java 继承有很多优点,是减少重复代码的可靠手段。
 * 但是继承同时存在一些缺点:
 *
 * 类的耦合性增加了。比如父类更改之后子类也同时需要更改
 * 降低代码灵活性。因为继承时,父类会对子类有约束性
 * 我们使用里氏替换原则,可以减少继承带来的问题。
 *
 * 大家都知道，正方形是一个特殊的长方形，那么我们在编写代码的时候，能不能将正方形类继承长方形类？
 * 首先编写一个长方形类(Rectangle)，一个正方形类(Square),正方形类继承于长方形类
 * 接着看下面的reSize方法
 *
 * 在传入参数为长方形对象时，没有问题。
 * 但是一旦参数是正方形对象，那么就死循环了
 *
 * 所以该设计不符合里氏替换原则，符合里氏替换原则的话，子类在父类运行的地方不会有任何错误以及异常
 *
 * 解决方案：当使用继承时，遵循里氏替换原则。类B继承类A时，除添加新的方法完成新增功能P2外，
 *         尽量不要重写父类A的方法，也尽量不要重载父类A的方法。
 *
 *         我们可以创造一个抽象类四边形类，然后长方形类和正方形类都继承四边形类。
 *         然后四边形类只有get方法，set方法全部由子类自己实现
 *         具体查看Quadrangle类，以及NewRectangle类和NewSquare类
 */
public class Main {
    //当高度小于等于宽度的时候 高度 + 1
    public void reSize(Rectangle r){
        while (r.getHeight() <= r.getWide()){
            r.setHeight(r.getHeight() + 1);
        }
    }
}
